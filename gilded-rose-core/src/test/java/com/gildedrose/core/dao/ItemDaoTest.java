package com.gildedrose.core.dao;

import com.gildedrose.core.model.Item;
import com.gildedrose.db.utils.testutil.HsqldbBaseTestSetup;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Optional;

import static org.junit.Assert.*;

@Slf4j
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath*:spring-bean-core-conf-test.xml"})
@ComponentScan("com.gildedrose.core.*")
public class ItemDaoTest extends HsqldbBaseTestSetup {

    // NOTE: The DB setup must have same configuration as the one used in repository conf

    @Autowired @Qualifier("ItemDao")
    protected Dao<Item> itemDao;

    @Override
    protected void initDatabase() throws SQLException {
        String tableName = "tblItems";
        try (Connection connection = getConnection();
             Statement statement = connection.createStatement();
        ) {
            statement.execute("DROP TABLE " + tableName + " IF EXISTS");
            statement.execute("CREATE TABLE " +tableName+ " (" +
                    " id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY," +
                    " name VARCHAR(50) NOT NULL," +
                    " sellIn INT NOT NULL," +
                    " quality INT NOT NULL," +
                    " type VARCHAR(50) NOT NULL," +
                    " ageingDegree INT NOT NULL," +
                    " ageingMode VARCHAR(50) NOT NULL,"+
                    ")"
            );
            connection.commit();

            String BASE_INSERT_INTO = "INSERT INTO "+tableName + " (name,sellin,quality,type,ageingDegree,ageingMode)";
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('+5 Dexterity Vest', 10, 20, 'vest', 1, 'BAD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('+5 Dexterity Vest', 10, 20, 'vest', 1, 'BAD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Aged Brie', 2, 0, 'cheese', 1, 'GOOD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Elixir of the Mongoose', 5, 7, 'normal power drink', 1, 'BAD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Sulfuras, Hand of Ragnaros', 0, 80, 'sulfuras', 1, 'BAD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Sulfuras, Hand of Ragnaros', -1, 80, 'sulfuras', 1, 'BAD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Backstage passes to a TAFKAL80ETC concert', 15, 20, 'concert pass',1, 'GOOD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Backstage passes to a TAFKAL80ETC concert', 10, 49, 'concert pass',1, 'GOOD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Backstage passes to a TAFKAL80ETC concert', 5, 49, 'concert pass',1, 'GOOD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Conjured Mana Cake', 3, 6, 'conjured',2, 'BAD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Cooking Book', 6, 8, 'Cooking Book', 1, 'BAD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Cooking Book', 6, 8, 'Cooking Book', 1, 'BAD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Jazz Book', 20, 10, 'Music Book', 1, 'BAD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Jazz Book', 20, 10, 'Music Book', 1, 'BAD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Blues Book', 20, 9, 'Music Book', 1, 'BAD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Blues Book', 20, 9, 'Music Book', 1, 'BAD')");
            statement.executeUpdate(BASE_INSERT_INTO + " VALUES ('Blues Book', 20, 8, 'Music Book', 1, 'BAD')");
            connection.commit();
        }
    }


    @Test
    public final void getAllTest(){
        List<Item> items = itemDao.getAll();

        assertNotNull(items);
        assertFalse(items.isEmpty());
        log.info("Found {} elements", items.size());
    }

    @Test
    public final void getOneTest(){
        // TODO: complete test and implement functionality if required

        Optional<Item> items = itemDao.get(1L);

        assertNotNull(items);
        assertTrue(items.isPresent());
    }

    @Test
    public final void getOneLimitsTest(){
        // TODO: complete test and implement functionality if required
        // TODO: test case id doesn't exist (-1, Long.MAX) or null values
    }

    @Test
    public final void getUpdateTest(){
        // TODO: complete test and implement functionality if required

        Item oldItem = itemDao.get(9L).get();

        Item item =  new Item(9,"Conjured Mana Cake", 3, 6, "conjured");
        item.quality = 3;

        String itemStr = item.toString();
        itemDao.update(item, new String[]{"quality"});

        Item newItem = itemDao.get(9L).get();

        // check the submitted item was not modified
        assertNotNull(item);
        assertEquals(itemStr, item.toString());

        // check that only quantity value have changed
        assertEquals(newItem.name, oldItem.name);
        assertEquals(newItem.sellIn, oldItem.sellIn);
        assertEquals(newItem.id, oldItem.id);
        // FIXME: since the db is a list, the updated item is always the same. Uncomment and make it work once the db resource is ready
        // Assert.assertNotEquals(oldItem.quality, newItem.quality);
    }

    @Test
    public final void getUpdateLimitsTest(){
        // TODO: complete test and implement functionality if required
        // TODO: test limit cases, e.g. the id or certain param doesn't exist (-1, Long.MAX) or null values
    }

    @Test
    public final void getSaveTest(){
        // TODO: complete test and implement functionality if required
    }

    @Test
    public final void getSaveLimitsTest(){
        // TODO: complete test and implement functionality if required
        // TODO: test limit case no names, or null values
    }

    @Test
    public final void getDeleteTest(){
        // TODO: complete test and implement functionality if required
    }

    @Test
    public final void getDeleteLimitTest(){
        // TODO: complete test and implement functionality if required
        // TODO: test limit case no names, or null values
    }
}